
// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

//Librerías
#include <xc.h>
#include <stdint.h>
#define _XTAL_FREQ 4000000

//Constante
#define _tmr0_value 206

//Variables
uint8_t POT3, POT4, POT1_TEMP, POT2_TEMP, POT3_TEMP, POT4_TEMP;
uint8_t opcion_pot, opcion_pot_temp;
uint8_t pot3_prev, pot4_prev;
uint8_t botonPrevState1, botonPrevState2, botonPrevState3 = 0;
uint8_t CONTADOR, ban;
uint8_t estado=1;
unsigned char valor1, valor2, valor3, valor4;
unsigned char GPOT1[3] = {0x03,0x04,0x05};
unsigned char GPOT2[3] = {0x06,0x07,0x08};
unsigned char GPOT3[3] = {0x09,0x10,0x11};
unsigned char GPOT4[3] = {0x12,0x13,0x14};

//Funciones
unsigned char mapeo(unsigned char pot)
{
    unsigned char tmr0reset;
    
    if (pot <= 13)
        tmr0reset = 5;
    else if (pot > 13 && pot <= 26)
        tmr0reset = 6;
    else if (pot > 26 && pot <= 38)
        tmr0reset = 7;
    else if (pot > 38 && pot <= 51)
        tmr0reset = 8;
    else if (pot > 51 && pot <= 64)
        tmr0reset = 9;
    else if (pot > 64 && pot <= 77)
        tmr0reset = 10;
    else if (pot > 77 && pot <= 89)
        tmr0reset = 11;
    else if (pot > 89 && pot <= 102)
        tmr0reset = 12;
    else if (pot > 102 && pot <= 115)
        tmr0reset = 13;
    else if (pot > 115 && pot <= 128)
        tmr0reset = 14;
    else if (pot > 128 && pot <= 140)
        tmr0reset = 15;
    else if (pot > 140 && pot <= 153)
        tmr0reset = 16;
    else if (pot > 153 && pot <= 166)
        tmr0reset = 17;
    else if (pot > 166 && pot <= 179)
        tmr0reset = 18;
    else if (pot > 179 && pot <= 191)
        tmr0reset = 19;
    else if (pot > 191 && pot <= 204)
        tmr0reset = 20;
    else if (pot > 204 && pot <= 217)
        tmr0reset = 21;
    else if (pot > 217 && pot <= 230)
        tmr0reset = 22;
    else if (pot > 230 && pot <= 242)
        tmr0reset = 23;
    else if (pot > 242 && pot < 255)
        tmr0reset = 24;
    else if (pot == 255 )
        tmr0reset = 25;
    
    return tmr0reset;
}

void serial(void){
    //POT3_TEMP = RCREG;
    opcion_pot = RCREG;
    //opcion_pot_temp = 0;
    PORTD = opcion_pot;
    
    switch (opcion_pot){
        case(1):
            opcion_pot_temp = 1;
            break;
        case(2):
            opcion_pot_temp = 2;
            break;
        case(3):
            opcion_pot_temp = 3;
            break;
        case(4):
            opcion_pot_temp = 4;
            break;
           
    }
    
    if (opcion_pot_temp ==1){
        while(!PIR1bits.RCIF){};
        POT1_TEMP = RCREG;
        //CCPR1L = 0
        CCPR1L = POT1_TEMP;
        //pot3_prev = POT3
        opcion_pot = 0;
    }
    if (opcion_pot_temp == 2){
        while(!PIR1bits.RCIF){};
        POT2_TEMP = RCREG;
        //CCPR2L = 0
        CCPR2L = POT2_TEMP;
        //pot3_prev = POT3
        opcion_pot = 0;
    }
    if (opcion_pot_temp == 3){
        while(!PIR1bits.RCIF){};
        POT3_TEMP = RCREG;
        POT3 = POT3_TEMP;
        //pot3_prev = POT3
        opcion_pot = 0;
    }
    if (opcion_pot_temp == 4){
        while(!PIR1bits.RCIF){};
        POT4_TEMP = RCREG;
        POT4 = POT4_TEMP;
        //pot3_prev = POT3
        opcion_pot = 0;
    }    
}

void writeToEEPROM(uint8_t data, uint8_t address){
    EEADR = address;
    EEDAT = data;
    
    EECON1bits.EEPGD = 0; // escribir memoria de datos
    EECON1bits.WREN = 1; // habilitar escritura a EEPROM (datos)
    
    INTCONbits.GIE = 0; //deshabilitar interrupciones
    
    EECON2 = 0x55; //secuencia obligatoria
    EECON2 = 0xAA;
    EECON1bits.WR = 1; //escritura a EEPROM
    
    while(PIR2bits.EEIF == 0);
    PIR2bits.EEIF = 0;
    
    INTCONbits.GIE = 1; //habilitar interrupciones
    EECON1bits.WREN = 0; // deshabilitar escritura a EEPROM
}

uint8_t readFromEEPROM(uint8_t address){
    EEADR = address; //dirección de lectura
    EECON1bits.EEPGD = 0; //memoria de datos
    EECON1bits.RD = 1; //Habilitar lectura 
    uint8_t data = EEDAT; //guardar el dato proveniente de la EEPROM
    return data;
}

void EEPROM(void){
    //Escribimos a la EEPROM
    if(PORTBbits.RB1 == 0)
        botonPrevState2 = 1;
    if(PORTBbits.RB1 == 1 && botonPrevState2 == 1){
        PORTAbits.RA6 = 1; 
        PORTAbits.RA7 = 0;
        ADCON0bits.ADON = 1;
        writeToEEPROM(CCPR1L, GPOT1[0]);
        writeToEEPROM(CCPR2L, GPOT2[0]);
        writeToEEPROM(POT3, GPOT3[0]);
        writeToEEPROM(POT4, GPOT4[0]);
        __delay_ms(500);
        botonPrevState2 = 0;
    }
    
    //Leemos la EEPROm
    if (PORTBbits.RB2 == 0)
        botonPrevState3 = 1;
    
    if (PORTBbits.RB2 == 1 && botonPrevState3 == 1){
        PORTAbits.RA6 = 0;
        PORTAbits.RA7 = 1;
        ADCON0bits.ADON = 0;
        valor1 = readFromEEPROM(GPOT1[0]);
        valor2 = readFromEEPROM(GPOT2[0]);
        valor3 = readFromEEPROM(GPOT3[0]);
        valor4 = readFromEEPROM(GPOT4[0]);
        CCPR1L = valor1;
        CCPR2L = valor2; 
        POT3 = valor3;
        POT4 = valor4; 
        botonPrevState3 = 0;
    }
}

//PROTOTIPO DE FUNCIONES
void setup(void);
unsigned char mapeo(unsigned char pot);
void serial(void);
void writeToEEPROM(uint8_t data, uint8_t address);
uint8_t readFromEEPROM(uint8_t address);

//Interrupción
void __interrupt() isr (void){
    //Interrupción ADC
    
    if (PIR1bits.ADIF){    //modificar el PWM cada cierto tiempo
        if(ADCON0bits.CHS == 0){ //revisar actividad en AN0
            //registro 0-027
            CCPR1L = (ADRESH>>1)+35;  //Mostrar parte alta
            CCP1CONbits.DC1B1 = ADRESH % 0b01; //control del bits menos significativo
            CCP1CONbits.DC1B0 = (ADRESH>>7);
        }
        else if (ADCON0bits.CHS == 1){  //si no es el canal AN1
            CCPR2L = (ADRESH>>1)+35;
            CCP2CONbits.DC2B1 = ADRESH % 0b01;
            CCP2CONbits.DC2B0 = (ADRESH>>7);
        }
        else if (ADCON0bits.CHS == 2){
            POT3 = mapeo(ADRESH);        //variable comparativa con contador
        }
        else if (ADCON0bits.CHS == 3){
            POT4 = mapeo(ADRESH);
        }
        PIR1bits.ADIF = 0;    //Limpieza de bandera
    }
    
    //Interrupción del TMR0
    if (INTCONbits.T0IF){ //INTCONbit para saber en que registro se encuentra
        //INTCONbits.T0IF = 0; //REinicio del conteo TMR0 apagando bandera
        CONTADOR ++;
        
        if (CONTADOR == POT3)
            PORTCbits.RC3 = 0;
        if (CONTADOR == POT4)
            PORTCbits.RC4 = 0;
        if (CONTADOR == 40){
            PORTCbits.RC3 = 1;
            PORTCbits.RC4 = 1;
            CONTADOR = 0;
        }
        TMR0 = _tmr0_value; //volver a iniciar TMR0
        INTCONbits.T0IF = 0;
    }
}

// LOOP PRINCIPAL

void main(void){
    setup();
    ADCON0bits.GO = 1; //volver a convertir
    while(1){   //ciclo infinito
        
        if (RB0 == 0)
            botonPrevState1 = 1;
        
        if (RB0 == 1 && botonPrevState1 == 1){
            estado++;
            botonPrevState1 = 0;
        }
        
        switch (estado){
            case 1:
                PORTE = 1;
                ADCON0bits.ADON = 1;
                break;
            case 2:
                PORTE = 2;
                EEPROM();
                break;
            case 3:
                PORTE = 4;
                ADCON0bits.ADON = 0;
                if (PIR1bits.RCIF == 1)
                    serial();
                break;
            default:
                estado = 1;
                break;
        }
        
        __delay_us(50); //tiempo para que la info se cargue
        
        if (ADCON0bits.GO == 0){
            switch(ADCON0bits.CHS){
                case 0:
                    __delay_us(50); //Delay antes de activar medición
                    ADCON0bits.CHS = 1;
                    break;
                case 1:
                    __delay_us(50);
                    ADCON0bits.CHS = 2;
                    break;
                case 2:
                    __delay_us(50);
                    ADCON0bits.CHS = 3;
                    break;
                case 3:
                    __delay_us(50);
                    ADCON0bits.CHS = 0;
                    break;
            }
        __delay_us(50); //delay antes de medición
        ADCON0bits.GO = 1; //volver a convertir
        }
    }
}
//CONFIGURACIÓN ENTRADAS Y SALIDAS
void setup(void){
    ANSEL = 0b00001111; //Pines del puerto A analogicos
    ANSELH = 0;
    
    TRISA = 0b00001111; 
    
    TRISD = 0;  //Puerto D como salida
    TRISE = 0; //Puerto E como salida
    TRISCbits.TRISC3 = 0;
    TRISCbits.TRISC4 = 0;
    
    TRISB = 0b0111; //PORTB como entrada
    
    OPTION_REGbits.nRBPU = 0; //    activar resistencia PULL UP
    
    WPUB = 0b0111;  //habilitar resistencia del PULL UP
    
    PORTE = 0;
    PORTD = 0;
    PORTB = 0;
    PORTA = 0;
    PORTC = 0;
    
    //CONFIGURADOR DEL OSCILADOR
    OSCCONbits.IRCF = 0b0110; // reloj a 4 mHz
    OSCCONbits.SCS = 1; //bit 0 en 1 para colocar R interno
    
    //CONFIGURACIón del TMR0
    OPTION_REGbits.T0CS = 0; 
    OPTION_REGbits.T0SE = 0;
    OPTION_REGbits.PSA = 0;
    OPTION_REGbits.PS2 = 0;
    OPTION_REGbits.PS1 = 0;
    OPTION_REGbits.PS0 = 0;
    TMR0 = _tmr0_value;
    
    INTCONbits.T0IF = 0; //bandera del TMR0 en 0
    INTCONbits.T0IE = 1; //habilitar INT del tmr0
    
    // CONFIGURACIÓN DE INTERRUPCIÓN ADC
    ADCON0bits.ADCS = 0b10;
    ADCON0bits.CHS = 0;
    ADCON1bits.ADFM = 0;
    ADCON1bits.VCFG0 = 0;
    ADCON1bits.VCFG1 = 0;
    __delay_us(50);
    
    //CONFIGURACIÓN DE INTERRUPCIÓN PWM
    TRISCbits.TRISC2 = 1; //RC2/CCP1 como entrada
    TRISCbits.TRISC1 = 1; //RC1/CCP2 como entrada
    PR2 = 155; //periodo
    CCP1CONbits.P1M = 0; //Config de una salida
    CCP1CONbits.CCP1M = 0b1100; //modo PWM
    CCP2CONbits.CCP2M = 0b1100;
    
    CCPR1L = 0x0f; //periodo inicial
    CCP1CONbits.DC1B = 0; //bits menos significativos
    CCPR2L = 0x0f;
    CCP2CONbits.DC2B0 = 0;
    
    PIR1bits.TMR2IF = 0; //apago de bandera
    T2CONbits.T2CKPS = 0b11; //prescaler 1:16
    
    T2CONbits.TMR2ON = 1; //encender TMR2
    
    while(PIR1bits.TMR2IF == 0); //ciclo de TMR2
    PIR1bits.TMR2IF = 0;   //apago de bandera
    TRISCbits.TRISC2 = 0; //salida de PWM
    TRISCbits.TRISC1 = 0; //salida PWm
    
    //CONFIGURACIÓN DE TX RX
    //tasa de bauds 9600
    TXSTAbits.SYNC = 0; //modo asíncrono com serial
    TXSTAbits.BRGH = 1; //velocidad alta
    
    BAUDCTLbits.BRG16 = 1; 
    
    SPBRG = 103;
    SPBRGH = 0;
    
    RCSTAbits.SPEN = 1; //encender modo serial
    RCSTAbits.RX9 = 0;
    TXSTAbits.TX9 = 0;
    RCSTAbits.CREN = 1; //se habilita recepción
    TXSTAbits.TXEN = 1; //se habilita transmisión
    
    // CONFIGURACION INTERRUPCION INT
    PIR1bits.RCIF = 0; //apago bander serial
    PIE1bits.RCIE = 0; // desactivar int receptor
    
    PIR1bits.ADIF = 0; //apagar bandera ADC
    PIE1bits.ADIE = 1; // habilitar int analogicas
    INTCONbits.PEIE = 1; //habilitar INT perifericas
    INTCONbits.GIE = 1;     // setear INT Globales para habilitarlas
    
    __delay_us(50);
    ADCON0bits.ADON = 1;  //encender modulo ADC
    
    return;
}
